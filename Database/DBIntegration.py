import pymongo
from web3 import Web3
import json

class mongoDB:

    def __init__(self) -> None:
        dbString = ""
        cluster = pymongo.MongoClient(dbString)
        db = cluster["UnicaDB"]
        self.collection = db["users"]

    def insertUser(self, phone:int, name:str, primaryKey:int) -> None:
        "This function will input user's, mobile, nameand primary key and then insert or append it in the MongoDB Database."
        user = self.collection.find_one({"phone": phone})
        if user is None:
            self.collection.insert_one({"phone": phone, "accounts": [{"name": name, "primaryKey": primaryKey}]})
        else:
            user["accounts"].append({"name": name, "primaryKey": primaryKey})
            self.collection.update_one({"phone": phone}, {"$set": {"accounts": user["accounts"]}})

    def viewUser(self, phone:int) -> dict:
        "This function will input user's phone and return his registered nameaccounts."
        user = self.collection.find_one({"phone": phone})
        return user

class Blockchain:

    def __init__(self) -> None:
        self.address = "0xBc9f201Aed40FB379347a8FeeF1b95b794f809A5"
        self.provider = "HTTP://127.0.0.1:7545"
        self.web3 = Web3(Web3.HTTPProvider(self.provider))
        self.web3.eth.default_account = self.web3.eth.accounts[0]
        self.abi = json.loads('[{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_data","type":"string"}],"name":"insertUser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"users","outputs":[{"internalType":"string","name":"_data","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"viewUser","outputs":[{"internalType":"string","name":"output","type":"string"}],"stateMutability":"view","type":"function"}]')
        self.bytecode = "608060405234801561001057600080fd5b50600436106100415760003560e01c8063365b98b2146100465780637b7de9871461007657806382f27c1214610092575b600080fd5b610060600480360381019061005b919061037c565b6100c2565b60405161006d919061043e565b60405180910390f35b610090600480360381019061008b91906103a9565b610168565b005b6100ac60048036038101906100a7919061037c565b6101ad565b6040516100b9919061043e565b60405180910390f35b60006020528060005260406000206000915090508060000180546100e59061051e565b80601f01602080910402602001604051908101604052809291908181526020018280546101119061051e565b801561015e5780601f106101335761010080835404028352916020019161015e565b820191906000526020600020905b81548152906001019060200180831161014157829003601f168201915b5050505050905081565b60405180602001604052808281525060008084815260200190815260200160002060008201518160000190805190602001906101a5929190610254565b509050505050565b606060008083815260200190815260200160002060000180546101cf9061051e565b80601f01602080910402602001604051908101604052809291908181526020018280546101fb9061051e565b80156102485780601f1061021d57610100808354040283529160200191610248565b820191906000526020600020905b81548152906001019060200180831161022b57829003601f168201915b50505050509050919050565b8280546102609061051e565b90600052602060002090601f01602090048101928261028257600085556102c9565b82601f1061029b57805160ff19168380011785556102c9565b828001600101855582156102c9579182015b828111156102c85782518255916020019190600101906102ad565b5b5090506102d691906102da565b5090565b5b808211156102f35760008160009055506001016102db565b5090565b600061030a61030584610485565b610460565b905082815260208101848484011115610326576103256105e4565b5b6103318482856104dc565b509392505050565b600082601f83011261034e5761034d6105df565b5b813561035e8482602086016102f7565b91505092915050565b60008135905061037681610604565b92915050565b600060208284031215610392576103916105ee565b5b60006103a084828501610367565b91505092915050565b600080604083850312156103c0576103bf6105ee565b5b60006103ce85828601610367565b925050602083013567ffffffffffffffff8111156103ef576103ee6105e9565b5b6103fb85828601610339565b9150509250929050565b6000610410826104b6565b61041a81856104c1565b935061042a8185602086016104eb565b610433816105f3565b840191505092915050565b600060208201905081810360008301526104588184610405565b905092915050565b600061046a61047b565b90506104768282610550565b919050565b6000604051905090565b600067ffffffffffffffff8211156104a05761049f6105b0565b5b6104a9826105f3565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156105095780820151818401526020810190506104ee565b83811115610518576000848401525b50505050565b6000600282049050600182168061053657607f821691505b6020821081141561054a57610549610581565b5b50919050565b610559826105f3565b810181811067ffffffffffffffff82111715610578576105776105b0565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61060d816104d2565b811461061857600080fd5b5056fea2646970667358221220b5f8fb733fd5f92afbba85b27edc653d5e25a4a50fdaa19c74d18cc2a482761864736f6c63430008070033"
        self.contract = self.web3.eth.contract(address = self.address, abi = self.abi)

    def insertUser(self, primaryKey:int, data:str) -> None:
        "This will write encrpypted data to the blockchain."
        self.contract.functions.insertUser(primaryKey, data).call()

    def viewUser(self, primaryKey:int) -> str:
        "This will read encrypted data from the blockchain"
        data = self.contract.functions.viewUser(primaryKey).call()
        return data